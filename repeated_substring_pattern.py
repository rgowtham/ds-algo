#!/usr/bin/env python3import sysclass Solution:    def fast_low_memory_method(self, s: str) -> bool:        s1 = s[1:] + s[:-1]        print(f"s1 is {s1}")        return s in s1    def repeatedSubstringPattern(self, s: str) -> bool:        from collections import Counter        for i in range(1, (len(s) // 2) + 1):            sb = s[:i]            # print(sb)            # print(i)            if len(s) % i == 0:                num_repeats = len(s) // i                # print(f"num_repeats: {num_repeats}")                full_string = "".join([sb for j in range(num_repeats)])                # print(f"Full string: {full_string}")                if full_string == s:                    return True        return Falsedef main():    solution = Solution()    result = solution.repeatedSubstringPattern("abcabcabcabcabcd")    result = solution.fast_low_memory_method("abab")    print(result)if __name__ == "__main__":    sys.exit(main())